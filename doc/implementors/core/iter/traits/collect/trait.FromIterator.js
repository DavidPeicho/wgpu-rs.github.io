(function() {var implementors = {};
implementors["arrayvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; FromIterator&lt;&lt;A as Array&gt;::Item&gt; for ArrayVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["fixedbitset"] = [{"text":"impl FromIterator&lt;usize&gt; for FixedBitSet","synthetic":false,"types":[]}];
implementors["gfx_hal"] = [{"text":"impl FromIterator&lt;Usage&gt; for Usage","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Access&gt; for Access","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;CommandBufferFlags&gt; for CommandBufferFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Aspects&gt; for Aspects","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;ImageFeature&gt; for ImageFeature","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;BufferFeature&gt; for BufferFeature","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;ViewCapabilities&gt; for ViewCapabilities","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Usage&gt; for Usage","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Access&gt; for Access","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Properties&gt; for Properties","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;HeapFlags&gt; for HeapFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Dependencies&gt; for Dependencies","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;CommandPoolCreateFlags&gt; for CommandPoolCreateFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;DescriptorPoolCreateFlags&gt; for DescriptorPoolCreateFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;ColorMask&gt; for ColorMask","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Face&gt; for Face","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;PipelineStage&gt; for PipelineStage","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;ShaderStageFlags&gt; for ShaderStageFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;PipelineCreationFlags&gt; for PipelineCreationFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;ControlFlags&gt; for ControlFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;ResultFlags&gt; for ResultFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;PipelineStatistic&gt; for PipelineStatistic","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;PresentMode&gt; for PresentMode","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;CompositeAlphaMode&gt; for CompositeAlphaMode","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Features&gt; for Features","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;PerformanceCaveats&gt; for PerformanceCaveats","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;DynamicStates&gt; for DynamicStates","synthetic":false,"types":[]}];
implementors["gpu_alloc"] = [{"text":"impl FromIterator&lt;UsageFlags&gt; for UsageFlags","synthetic":false,"types":[]}];
implementors["gpu_alloc_types"] = [{"text":"impl FromIterator&lt;AllocationFlags&gt; for AllocationFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;MemoryPropertyFlags&gt; for MemoryPropertyFlags","synthetic":false,"types":[]}];
implementors["gpu_descriptor"] = [{"text":"impl FromIterator&lt;DescriptorSetLayoutCreateFlags&gt; for DescriptorSetLayoutCreateFlags","synthetic":false,"types":[]}];
implementors["gpu_descriptor_types"] = [{"text":"impl FromIterator&lt;DescriptorPoolCreateFlags&gt; for DescriptorPoolCreateFlags","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K, V, S&gt; FromIterator&lt;(K, V)&gt; for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; FromIterator&lt;T&gt; for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;K, V, S&gt; FromIterator&lt;(K, V)&gt; for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Hash + Eq,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; FromIterator&lt;T&gt; for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Hash + Eq,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["naga"] = [{"text":"impl FromIterator&lt;Features&gt; for Features","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;WriterFlags&gt; for WriterFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;SamplingFlags&gt; for SamplingFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;StorageAccess&gt; for StorageAccess","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;GlobalUse&gt; for GlobalUse","synthetic":false,"types":[]}];
implementors["petgraph"] = [{"text":"impl&lt;N, E, Ty, Item&gt; FromIterator&lt;Item&gt; for GraphMap&lt;N, E, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: IntoWeightedEdge&lt;E, NodeId = N&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: NodeTrait,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: EdgeType,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl FromIterator&lt;TokenTree&gt; for TokenStream","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;TokenStream&gt; for TokenStream","synthetic":false,"types":[]}];
implementors["ron"] = [{"text":"impl FromIterator&lt;(Value, Value)&gt; for Map","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Extensions&gt; for Extensions","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; FromIterator&lt;&lt;A as Array&gt;::Item&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["spirv_headers"] = [{"text":"impl FromIterator&lt;ImageOperands&gt; for ImageOperands","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;FPFastMathMode&gt; for FPFastMathMode","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;SelectionControl&gt; for SelectionControl","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;LoopControl&gt; for LoopControl","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;FunctionControl&gt; for FunctionControl","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;MemorySemantics&gt; for MemorySemantics","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;MemoryAccess&gt; for MemoryAccess","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;KernelProfilingInfo&gt; for KernelProfilingInfo","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;RayFlags&gt; for RayFlags","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl&lt;T, P&gt; FromIterator&lt;T&gt; for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; FromIterator&lt;Pair&lt;T, P&gt;&gt; for Punctuated&lt;T, P&gt;","synthetic":false,"types":[]}];
implementors["wgpu_core"] = [{"text":"impl FromIterator&lt;PipelineFlags&gt; for PipelineFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;BufferUse&gt; for BufferUse","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;TextureUse&gt; for TextureUse","synthetic":false,"types":[]}];
implementors["wgpu_types"] = [{"text":"impl FromIterator&lt;BackendBit&gt; for BackendBit","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Features&gt; for Features","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;ShaderStage&gt; for ShaderStage","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;ShaderFlags&gt; for ShaderFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;TextureFormatFeatureFlags&gt; for TextureFormatFeatureFlags","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;ColorWrite&gt; for ColorWrite","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;BufferUsage&gt; for BufferUsage","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;TextureUsage&gt; for TextureUsage","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;PipelineStatisticsTypes&gt; for PipelineStatisticsTypes","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()