(function() {var implementors = {};
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"arrayvec/struct.ArrayString.html\" title=\"struct arrayvec::ArrayString\">ArrayString</a>&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: <a class=\"trait\" href=\"arrayvec/trait.Array.html\" title=\"trait arrayvec::Array\">Array</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,&nbsp;</span>","synthetic":false,"types":["arrayvec::array_string::ArrayString"]},{"text":"impl&lt;T:&nbsp;<a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>, A:&nbsp;<a class=\"trait\" href=\"arrayvec/trait.Array.html\" title=\"trait arrayvec::Array\">Array</a>&lt;Item = T&gt;&gt; <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"arrayvec/struct.ArrayVec.html\" title=\"struct arrayvec::ArrayVec\">ArrayVec</a>&lt;A&gt;","synthetic":false,"types":["arrayvec::ArrayVec"]}];
implementors["ron"] = [{"text":"impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"enum\" href=\"ron/value/enum.Value.html\" title=\"enum ron::value::Value\">Value</a>","synthetic":false,"types":["ron::value::Value"]},{"text":"impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"ron/ser/struct.PrettyConfig.html\" title=\"struct ron::ser::PrettyConfig\">PrettyConfig</a>","synthetic":false,"types":["ron::ser::PrettyConfig"]},{"text":"impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"ron/value/struct.Map.html\" title=\"struct ron::value::Map\">Map</a>","synthetic":false,"types":["ron::value::Map"]},{"text":"impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"ron/extensions/struct.Extensions.html\" title=\"struct ron::extensions::Extensions\">Extensions</a>","synthetic":false,"types":["ron::extensions::Extensions"]}];
implementors["wgpu_core"] = [{"text":"impl&lt;T&gt; <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"wgpu_core/id/struct.Id.html\" title=\"struct wgpu_core::id::Id\">Id</a>&lt;T&gt;","synthetic":false,"types":["wgpu_core::id::Id"]}];
implementors["wgpu_types"] = [{"text":"impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"wgpu_types/struct.ShaderStage.html\" title=\"struct wgpu_types::ShaderStage\">ShaderStage</a>","synthetic":false,"types":["wgpu_types::ShaderStage"]},{"text":"impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"enum\" href=\"wgpu_types/enum.TextureFormat.html\" title=\"enum wgpu_types::TextureFormat\">TextureFormat</a>","synthetic":false,"types":["wgpu_types::TextureFormat"]},{"text":"impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"enum\" href=\"wgpu_types/enum.IndexFormat.html\" title=\"enum wgpu_types::IndexFormat\">IndexFormat</a>","synthetic":false,"types":["wgpu_types::IndexFormat"]},{"text":"impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"wgpu_types/struct.Color.html\" title=\"struct wgpu_types::Color\">Color</a>","synthetic":false,"types":["wgpu_types::Color"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()